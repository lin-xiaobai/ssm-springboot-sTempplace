<?xml version="1.0" encoding="UTF-8"?>
<!--xmlns:context 名称空间-->
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd">




<!--    配置自动扫描组件-->
    <context:component-scan base-package="com.springMVC"></context:component-scan>
<!--        配置Thymeleaf视图解析器  每当页面跳转的时候，如果视图的名称符合当前的条件，就会被视图解析器所解析，然后来找到相应的页面来实现跳转-->
<!--    ThymeleafViewResolver专门解析Thymeleaf-->
        <bean id="viewResolver" class="org.thymeleaf.spring5.view.ThymeleafViewResolver">
<!--           设置视图解析器的优先级-->
            <property name="order" value="1"/>
<!--            设置解析时的编码-->
            <property name="characterEncoding" value="UTF-8"/>
<!--            当前的模板-->
            <property name="templateEngine">

                <bean class="org.thymeleaf.spring5.SpringTemplateEngine">
                    <property name="templateResolver">
<!--                内部bean是当前解析当前视图的策略 把当前设置的名称加上视图前缀和视图后缀，然后最终跳转到指定的页面-->
                        <bean class="org.thymeleaf.spring5.templateresolver.SpringResourceTemplateResolver">
<!--                            视图前缀 所访问的thymeleaf视图在/WEB-INF/templates-->
                            <property name="prefix" value="/WEB-INF/templates/"/>
<!--                            视图后缀  访问的页面是一个HTML5和html-->
                            <property name="suffix" value=".html"/>
<!--                            当前模板的模型-->
                            <property name="templateMode" value="HTML5"/>
<!--                            页面中的编码-->
                            <property name="characterEncoding" value="UTF-8"/>
                        </bean>
                    </property>
                </bean>
            </property>
        </bean>
    <!--    视图控制器view-controller
    当控制器方法中，仅仅用来实现 页面跳转，即只需要设置  视图名称 时，可以将处理方法使用 view-controller 标签进行表示
        path:设置处理的请求地址
        view-name:设置请求地址所对应的视图名称
    -->
    <!--    通过地址为“/",跳转到首页-->
    <mvc:view-controller path="/" view-name="index"></mvc:view-controller>

    <!--  通过地址为"/test_RESTFul",跳转到测试视图test_RESTFul页面  -->
    <mvc:view-controller path="/test_RESTFul" view-name="test_RESTFul"></mvc:view-controller>

    <!--开发对静态资源的访问-->
    <!--    工作：首先静态资源在访问的时候会被springMVC的前端控制器 进行处理
    如果在控制器中找不到 相对应的请求映射 ，它就会交给默认的servlet,如果找不到则报出404。
    -->

    <mvc:default-servlet-handler />


    <!--
       作用：1.当springMVC中设置如何一个view-controller时，其他控制器中的请求映射将全部失效，此时需要在springmvc的核心配置文件中设置开启mvc注解启动的标签-->
    <!--        2.在springmvc.xml的核心配置文件中开启mvc的注解驱动，此时在HandlerAdaptor中会自动
     * 装配一个信息转换器：Mappingjackson2HttpMessageConverter，可以将响应到浏览器
     * 的java对象转换为json格式的字符串-->
    <mvc:annotation-driven >
        <mvc:message-converters>
            <!--        处理中文响应内容乱码-->
            <bean class="org.springframework.http.converter.StringHttpMessageConverter">
                <property name="defaultCharset" value="UTF-8"/>
                <property name="supportedMediaTypes">
                    <list>
                        <value>test/html</value>
                        <value>application/json</value>
                    </list>
                </property>
            </bean>
        </mvc:message-converters>
    </mvc:annotation-driven >

    <!--   1.配置文件上传解析器，将上传的文件封装为MultipartFile-->
    <!--    MultipartFile是一个接口，所以要找到它的实现类CommonsMultipartResolver-->

    <!--获取一个bean 要么通过id获取 要么通过类型获取   -->
    <!--    springmvc是通过id获取bean-->
    <!--    multipartResolver：id属性名是固定的-->
<!--    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver"></bean>-->

<!--    配置拦截器 方法3个-->
    <mvc:interceptors>
<!--        bean是ioc容器的一个对象（组件）-->
<!--第一个： 配置bean作用是:当前某个类的对象 是一个拦截器-->
<!--        只配置一个bean的话 所有的请求都会被拦截-->
<!--        <bean class="com.springMVC.Interceptor.firstInterceptor"></bean>-->

<!--        ref：会引用IOC容器中某个bean的id-->
<!--        前提是需要将拦截器类交给spring的IOC容器管理
     第二个：写法：在拦截器类上标识一个 普通的注解 @Component
            因为无法编写拦截规则 所以这个ref和bean 都是将所有的请求进行拦截-->

<!--        配置两个拦截器  拦截的顺序：
1.preHandle方法是通过  ref的顺序执行的
2.postHandle方法和afterCompletion方法是通过 ref的倒序执行的
 -->
        <ref bean="firstInterceptor"></ref>
        <ref  bean="secondInterceptor"></ref>

<!--     第三个：<mvc:interceptor>
这个可以设置拦截路径  可以指定拦截规则-->
<!--        <mvc:interceptor>-->
<!--          mapping：设置拦截的路径
              path="/*"：拦截所有的请求  只能拦截上下文中一层目录
                即：拦截/springmvc/a 等等一层目录，
                无法拦截两层或更多的目录 即/springmvc/a/b/c
              -->
<!--            两行代码：拦截所有的请求，但是排除了请求路径中为“/”的请求-->
<!--            “/**”表示拦截所有的请求，无论多少层目录-->
<!--            <mvc:mapping path="/**"/>-->
<!--          exclude-mapping:排除某个请求映射-->
<!--    排除“/”的请求映射 当请求路径中为 "/"时不会被拦截器拦截  -->
<!--            <mvc:exclude-mapping path="/"/>-->
<!--            指定的拦截器类-->
<!--            <ref bean="firstInterceptor"></ref>-->
<!--        </mvc:interceptor>-->
    </mvc:interceptors>

<!--    配置异常处理（控制器方法中出现异常时，设置一个新的视图） -->
<!--    <bean class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">-->

<!--&lt;!&ndash;        property是一个map集合，里面元素是使用键值对保存数据&ndash;&gt;-->
<!--        <property name="exceptionMappings">-->
<!--&lt;!&ndash;            通过  <props>标签里进行赋值-->
<!--            <pro key=“”></prop>进行赋值 key写的键名称 value是值-->
<!-- &ndash;&gt;-->
<!--            <props>-->
<!--&lt;!&ndash;                key：指定异常 值是全类名-->
<!--                    value:新的视图名称-->
<!--                    如果不设置前缀则会被ThymeleafViewResolver解析-->
<!--                    如果设置前缀则会设置相对应的视图-->
<!--                    eg:如果设置了前缀为redirect（重定向）则会设置redirect视图-->
<!--                    如果设置了前缀为forward（请求跳转）则会设置forward视图-->
<!--                    &ndash;&gt;-->

<!--&lt;!&ndash;              只处理  ArithmeticException：数字异常-->
<!--                   添加空指针异常-->
<!--&ndash;&gt;-->
<!--                <prop key="java.lang.NullPointerException">error</prop>-->
<!--                <prop key="java.lang.ArithmeticException">error</prop>-->
<!--            </props>-->
<!--        </property>-->
<!--        &lt;!&ndash;properties的键表示处理器方法执行过程中出现的异常 properties的值表示若出现指定异常时，设置一个新的视图名称，跳转到指定页面 &ndash;&gt;-->
<!--&lt;!&ndash;        设置一个property标签，将异常信息通过键值对的方法保存信息，并且共享在请求域中&ndash;&gt;-->
<!--&lt;!&ndash;        ex：将信息都存放在键名为ex的请求域中，可以通过${ex}来获取信息&ndash;&gt;-->
<!--&lt;!&ndash;        将异常信息共享在请求域中的键-->
<!--            exceptionAttribute属性设置一个属性名，将出现的异常信息在请求域中进行共享 &ndash;&gt;-->
<!--        <property name="exceptionAttribute" value="ex"></property>-->
<!--    </bean>-->

    
</beans>