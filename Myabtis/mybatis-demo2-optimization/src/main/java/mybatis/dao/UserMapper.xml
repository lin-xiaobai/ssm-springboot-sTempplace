<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!--namespace 绑定一个对应的Dao/mapper接口  即dao/mapper的实现类-->
<!--namespace:接口的全类名-->
<mapper namespace="mybatis.dao.UserMapper">
<!--select查询语句 id对应的是方法的名字  resultType:sql语句返回值类型（结果集）对应的是mapper(Bean)的全类名-->
<!--    执行sql查询语句   User.t_user ：user数据库下的t_user数据表-->

<!--  由于mybatis.pojo.User已经在mybatis-config配置文件中
使用typeAliases标签起了一个 User的别名 所以可以直接使用别名代替这个类路径  -->
    <select id="getUserList" resultType="User">
    select * from user.t_user
     </select>

    <!--    parameterType:参数类型  #{id}代表传入的id值-->
    <delete id="deleteUser" parameterType="int">
        delete from user.t_user where id= #{id}
    </delete>
<!--    查询个人  resultType="mybatis.pojo.Student"设置返回的类型为user对象-->
    <select id="getUserById" parameterType="int" resultType="User">
        select * from user.t_user where id=#{id};
    </select>

<!--    添加个人信息-->
    <insert id="addUser" parameterType="User" >
        insert into user.t_user (id,name,pwd) value (#{id},#{name},#{pwd})
    </insert>
<!--    修改-->
    <update id="updateUser" parameterType="User">
        update user.t_user set name=#{name},pwd=#{pwd} where id=#{id} ;
    </update>
</mapper>