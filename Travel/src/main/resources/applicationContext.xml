<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">

    <!-- 扫描业务类 -->
    <context:component-scan base-package="com.itheima.travel.service,com.itheima.travel.utils"/>

    <!-- 加载属性配置文件，并且将键和值放在容器中 -->
    <context:property-placeholder location="classpath:jdbc.properties"/>

    <!-- 配置数据源对象 -->
    <bean class="com.alibaba.druid.pool.DruidDataSource" id="dataSource">
        <!--连接字符串 -->
        <property name="url" value="${jdbc.url}"/>
        <!--用户名-->
        <property name="username" value="${jdbc.username}"/>
        <!--密码-->
        <property name="password" value="${jdbc.password}"/>
        <!--驱动名字-->
        <property name="driverClassName" value="${jdbc.driver}"/>
    </bean>

    <!-- 创建会话工厂类 -->
    <bean class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <!-- 给实体类定义别名 -->
        <property name="typeAliasesPackage" value="com.itheima.travel.domain"/>
        <!--用到了mybatis分页插件，要指定mybatis的配置文件-->
        <property name="configLocation" value="classpath:mybatis-config.xml"/>
    </bean>

    <!-- DAO代理类 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.itheima.travel.dao"/>
    </bean>

    <!-- 事务管理器 -->
    <bean class="org.springframework.jdbc.datasource.DataSourceTransactionManager" id="transactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!-- 注解式事务 -->
    <tx:annotation-driven/>

    <!-- Spring整合Redis -->
    <!-- 1.配置Redis的单独的配置类 -->
    <bean class="org.springframework.data.redis.connection.RedisStandaloneConfiguration" id="redisStandaloneConfiguration">
        <!-- 主机名 -->
        <property name="hostName" value="localhost"/>
        <!-- 端口号 -->
        <property name="port" value="6379"/>
    </bean>

    <!-- 2.配置Redis的连接工厂 -->
    <bean class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory" id="jedisConnectionFactory">
        <!-- 通过构造器注入redis的配置对象 -->
        <constructor-arg ref="redisStandaloneConfiguration"/>
    </bean>

    <!-- 3.配置RedisTemplate对象，简化Redis的操作 -->
    <bean class="org.springframework.data.redis.core.RedisTemplate" id="redisTemplate">
        <!-- 配置上面连接工厂对象 -->
        <property name="connectionFactory" ref="jedisConnectionFactory"/>
        <!-- 指定序列化策略 -->
        <property name="keySerializer">
            <!-- 键：字符串序列化策略 -->
            <bean class="org.springframework.data.redis.serializer.StringRedisSerializer"/>
        </property>
        <property name="valueSerializer">
            <!-- 值：使用JSON序列化策略 -->
            <bean class="org.springframework.data.redis.serializer.GenericJackson2JsonRedisSerializer"/>
        </property>
    </bean>
</beans>